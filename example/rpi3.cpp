#include <iostream>
#include <csignal>
#include <unistd.h>

#include "LEDStripController.h"
#include "LEDStripControllerRpi3.h"
#include "LEDColorController.h"

static const int LEDS_WIDTH = 45;
static const int LEDS_HEIGHT = 18;
static const bool SHOW_BOTTOM = false;

static const int LED_COUNT = (LEDS_HEIGHT * 2) + LEDS_WIDTH + (LEDS_WIDTH * SHOW_BOTTOM);


volatile sig_atomic_t keep_running = 1;

void signal_handler(int signal) {
    keep_running = 0;
}

int main()
{
    // Initialize LED strip controller
    LEDStripController* controller;
    controller = new LEDStripControllerRpi3(LED_COUNT);

    // Initialize Color controller
    LEDColorController lcc = LEDColorController(LEDS_WIDTH, LEDS_HEIGHT, SHOW_BOTTOM);
    uint32_t* pColorArray = lcc.getColorArray();

    lcc.setColorByHexCode(0xFFFFFF);
    //lcc.setColorByName(Color::Red);
    //lcc.setColorByName(Color::Green);


    controller->init();
    controller->ledArrayClear();
    
    // Register signal handler for Ctrl + C
    // SIGINT generated by Ctrl + C
    std::signal(SIGINT, signal_handler);

    while (keep_running) {
        // Set color
        controller->ledArraySetColor(pColorArray);
        // Render
        controller->render();
        usleep(1000000 / 15); // 15 frames per second
    }

    controller->ledArrayClear();
    controller->render();

    // Controller deconstructor called
    delete controller;

    std::cout << "Exiting program." << std::endl;
    return 0;

}
